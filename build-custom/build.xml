<?xml version="1.0"?>
<!DOCTYPE project>
<project name="Viking Base Build" default="build" basedir="../../../">
  <xmlproperty file="${basedir}/pom.xml" collapseAttributes="true" />

  <!-- Our custom properties file. These properties will take precedence over those defined in the build folder. -->
  <property file="${basedir}/bower_components/viking-base/build-custom/config/build.properties" />

  <!-- Load default property files -->
  <property file="${dir.build}/config/project.properties" />
  <property file="${dir.build}/config/default.properties" />

  <!-- Import the original build xml from the build folder -->
  <import file="${basedir}/${dir.build}/build.xml" />

  <!-- Jar phase default -->
  <property name="jarPhase" value="package" />

  <!--
  *************************************************
  * BASE TARGETS                                  *
  *************************************************
  -->

  <!-- Does not clean build output -->
  <target name="noclean">
    <echo message="Not cleaning previously published files..." />
  </target>

  <!-- Debug target -->
  <target name="debug" depends="-clean">
    <echo message="Building a Debug Environment..." />
    <antcall target="-build.debug" />
  </target>

  <!-- CSS target -->
  <target name="debugcss" depends="noclean">
    <echo message="Building CSS only..." />
    <antcall target="-build.debugcss" />
  </target>

  <!-- Debug with documentation target -->
  <target name="debugdocs" depends="-clean">
    <echo message="Building a Debug Environment with documentation..." />
    <antcall target="-build.debugdocs" />
  </target>

  <!--Documentation target -->
  <target name="docs" depends="noclean">
    <echo message="Building documentation only..." />
    <antcall target="-build.docs" />
  </target>

  <!-- Handlebars target -->
  <target name="debughbs" depends="noclean">
    <echo message="Compiling Handlebars templates only..." />
    <antcall target="-build.debughbs" />
  </target>

  <!-- JavaScript target -->
  <target name="debugjs" depends="noclean">
    <echo message="Building JavaScript only..." />
    <antcall target="-build.debugjs" />
  </target>

  <!--
  *************************************************
  * BUILD TARGETS                                 *
  *************************************************
  -->
  
  <target name="-text.production" depends="version, -intro, jar, -mkdirs, -js.ember.handlebars, -js.all.minify, -js.main.concat, -js.scripts.concat, -css, -usemin, -htmlclean, -copy" />
  <target name="-build.debugcss" depends="version, -css" />
  <target name="-build.debug" depends="version, -intro, jar, -mkdirs, -js.ember.handlebars, -needhtmlrefresh, -css, -htmlclean, -copyall" />
  <target name="-build.debugdocs" depends="version, -intro, jar, -mkdirs, -js.ember.handlebars, -needhtmlrefresh, -css, -htmlclean, -copyall, -jsdoc3" />
  <target name="-build.debughbs" depends="version, -js.ember.handlebars.copy" />
  <target name="-build.debugjs" depends="version, -copyjs" />
  <target name="-build.docs" depends="version, -jsdoc3" />

  <!--
  *************************************************
  * FUNCTION TARGETS OVERRIDES                    *
  *************************************************
  -->

  <target name="-copyjs" depends="-mkdirs">
    <!-- This is a private target -->
    <!-- Copies all files, including .css and .js files for when you aren't minifying-->
    <echo message="Copying over all files..." />
    <copy todir="./${dir.publish}">
      <fileset dir="${dir.source}/" includes="**/*.js" excludes="${file.default.exclude}, ${file.exclude}" />
    </copy>
    <echo message="A copy of JavaScript files are now in: ./${dir.publish}." />
  </target>

  <target name="-mkdirs">
    <condition property="publish.exists">
      <available file="${dir.publish}" type="dir" />
    </condition>
    <condition property="intermediate.exists">
      <available file="${dir.intermediate}" type="dir" />
    </condition>
    <if>
      <or>
        <equals arg1="${dir.publish}" arg2="." />
        <equals arg1="${dir.publish}" arg2=".." />
        <equals arg1="${dir.publish}" arg2="/" />
        <equals arg1="${dir.publish}" arg2="./" />
        <equals arg1="${dir.publish}" arg2=".." />
      </or>
      <then>
        <fail message="Your dir.publish folder is set to ${dir.publish} which could delete your entire site or worse. Change it in project.properties" />
      </then>
    <else>
      <echo message="Creating directory structure... ${dir.publish}" />
        <if>
          <and>
            <equals arg1="${publish.exists}" arg2="true" />
            <equals arg1="${intermediate.exists}" arg2="true" />
          </and>
          <then>
            <echo message="The directories ${dir.publish} and ${dir.intermediate} already exist." />
          </then>
          <else>
            <mkdir dir="${dir.intermediate}" />
            <copy todir="${dir.intermediate}" includeEmptyDirs="true">
              <dirset dir="${dir.source}/" excludes="${file.default.exclude}, ${file.exclude}" />
            </copy>
            <mkdir dir="${dir.publish}" />
            <copy todir="${dir.publish}" includeEmptyDirs="true">
              <dirset dir="${dir.source}/" excludes="${file.default.exclude}, ${file.exclude}" includes="* "/>
            </copy>
          </else>
        </if>
      </else>
    </if>
  </target>

  <target name="-js.main.concat" depends="-js.all.minify" description="(PRIVATE) Concatenates the JS files in dir.js">
    <echo message="Concatenating Main JS scripts based on ${file.root.page}..." />
    <!-- Concatenate scripts to intermediate/js/libs/libs.js -->
    <!-- overwrite=no here means not to overwrite if the target is newer than the sources -->
    <!-- Filter out byte order marks (see http://stackoverflow.com/questions/2742735/get-ant-concat-to-ignore-boms) -->
    <concat destfile="./${dir.intermediate}/${dir.js}/scripts-concat.min.js" overwrite="no">
      <filelist dir="./${dir.intermediate}/" files="${scriptsToConcat}" />
      <filterchain>
        <deletecharacters chars="&#xFEFF;" />
      </filterchain>
    </concat>      
  </target>

  <target name="-js.scripts.concat" depends="-js.main.concat" if="build.concat.scripts">
    <echo message="Concatenating library file with main script file" />
    <if>
      <available file="${dir.intermediate}/${dir.js}/scripts-concat.min.js" />
      <then>
        <checksum file="${dir.intermediate}/${dir.js}/scripts-concat.min.js" algorithm="sha" property="scripts.fullsha" />
        <propertyregex property="scripts.sha" input="${scripts.fullsha}" regexp=".{${hash.length}}" select="\0" />
        <property name="scripts.js" value="${dir.js}/${scripts.sha}.js" />
        <copy file="${dir.intermediate}/${dir.js}/scripts-concat.min.js" tofile="${dir.publish}/${dir.js}/${scripts.sha}.js" />
      </then>
    </if>
    
    <!-- cachebust modules directory name -->
    <!-- Concatinate only to generate checksum. Concatinated file not actually published. -->
    <if>
      <available file="./${dir.intermediate}/${dir.js.modules}" />
      <then>
        <concat destfile="./${dir.intermediate}/${dir.js.modules}/_all.js" overwrite="no">
          <fileset dir="./${dir.intermediate}/${dir.js.modules}/">
            <include name="*.js" />
          </fileset>
        </concat>
        <if>
          <available file="./${dir.intermediate}/${dir.js.modules}/_all.js" />
          <then>
            <checksum file="${dir.intermediate}/${dir.js.modules}/_all.js" algorithm="sha" property="modules.fullsha" />
            <propertyregex property="modules.sha" input="${modules.fullsha}" regexp=".{${hash.length}}" select="\0" />
            <property name="modules.js.dir" value="${dir.js}/${modules.sha}" />
            <move file="${dir.publish}/${dir.js.modules}/" tofile="${dir.publish}/${dir.js}/${modules.sha}/" />
            <copy todir="${dir.publish}/${dir.js}/${modules.sha}/" >
              <fileset dir="${dir.intermediate}/${dir.js.modules}" includes="**/**.js" excludes="_all.js" />
            </copy>
          </then>
        </if>
      </then>
    </if>
  </target>

  <target name="-js.all.minify" depends="-mkdirs, -js.ember.handlebars" description="(PRIVATE) Minifies the scripts.js files created by js.scripts.concat">
    <if>
      <and>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debug" />
        </not>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debugdocs" />
        </not>
      </and>
      <then>
        <echo message="Minifying scripts" />
        <copy todir="${dir.intermediate}/${dir.js}">
          <fileset dir="${dir.source}/${dir.js}" includes="${file.js.bypass}, **/*.min.js" excludes="${file.default.exclude}, ${file.exclude}" />
        </copy>
        <apply executable="java" parallel="false">
          <fileset dir="${dir.source}" excludes="${file.default.exclude}, ${file.exclude}, ${file.js.bypass}, **/*.min.js" includes="**/*.js">
            <exclude name="${dir.js}/otherscripts-concat.js" />
            <exclude name="${dir.js}/scripts-concat.js" />
          </fileset>
          <arg line="-jar" />
          <arg path="./${dir.build.tools}/${tool.compiler}" />
          <arg line="--js" />
          <srcfile />
          <arg line="--compilation_level" />
          <arg value="${scripts.compilation.level}" />
          <arg line="--warning_level" />
          <arg value="${scripts.compilation.warninglevel}" />
          <arg line="--jscomp_off" />
          <arg value="unknownDefines" />
          <arg line="--language_in" />
          <arg value="${scripts.compilation.language}" />
          <arg line="--define='DEBUG=false'" />
          <arg line="--js_output_file" />
          <mapper type="glob" from="*.js" to="${basedir}/${dir.intermediate}/*.js" />
          <targetfile />
        </apply>

        <echo message="Building list of minified scripts to concatenate" />
        <filelist id="file.root" dir="${dir.source}" files="${file.root.page}" />
        <exec executable="java" outputproperty="scriptsToConcat">
          <arg value="-classpath" />
          <arg value="${dir.build.tools}" />
          <arg value="FindAttribute" />
          <arg value="${file.root.page}" />
          <arg value="${build.jstoken}" />
          <arg value="script" />
          <arg value="src" />
        </exec>

        <!-- at this point all js files are minified with their original names -->

        <propertyregex property="scriptsToConcatExclude" input="${scriptsToConcat}" regexp="\n" replace="," global="true" />

        <copy todir="${dir.publish}">
          <fileset dir="${dir.intermediate}" includes="${file.js.bypass}, ${slug.libs}/*, ${slug.modules}/*, **/*.js" excludes="${scriptsToConcatExclude}" />
        </copy>
      </then>
      <else>
        <echo message="Copying scripts" />
        <copy todir="${dir.intermediate}/${dir.js}">
          <fileset dir="${dir.source}/${dir.js}" includes="**/*.js" excludes="${file.default.exclude}, ${file.exclude}" />
        </copy>
      </else>
    </if>
  </target>

  <target name="-usemin" depends="-rev.image.filenames" description="(PRIVATE) Replaces references to non-minified scripts">
    <if>
      <and>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debug" />
        </not>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debugcss" />
        </not>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debugdocs" />
        </not>
      </and>
      <then>
        <echo message="Switching to minified js files..." />
          
        <!-- switch from a regular jquery to minified -->
        <replaceregexp match="jquery-(\d|\d(\.\d)+)\.js" replace="jquery-\1.min.js" flags="g">
          <fileset dir="./${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>
        <!-- switch any google CDN reference to minified -->
        <replaceregexp match="(\d|\d(\.\d)+)\/jquery\.js" replace="\1/jquery.min.js" flags="g">
          <fileset dir="./${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>
        <echo>Kill off those versioning flags: ?v=2</echo>
        <replaceregexp match='\?v=\d+">' replace='">' flags="g">
          <fileset dir="./${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>
        <echo>Remove favicon.ico reference if it is pointing to the root</echo>
        <replaceregexp match="&lt;link rel=[&quot;']shortcut icon[&quot;'] href=[&quot;']/favicon\.ico[&quot;']&gt;" replace="">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>
        <!-- we maintain the apple-touch-icon reference for Android 2.2   www.ravelrumba.com/blog/android-apple-touch-icon
        <replace token="&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;/apple-touch-icon.png&quot;>" value="">
            <fileset dir="${dir.intermediate}" includes="${page-files}"/>
        </replace>
        -->
          
        <echo message="Update the HTML to reference our concatenated script file: ${scripts.js}" />
        <!-- Determines which Regex for AMD use -->
        <var name="matchRegex" value="" />
        <var name="replaceRegex" value="" />
        <if>
          <isset property="script.require.path" />
          <then>
            <echo message="Updating HTML to reflect the use of RequireJS" />
            <var name="matchRegex" value="&lt;!-- //-beg- ${build.jstoken} [\d\w\s\W]*&lt;script.*data-main=['&quot;]?(.*)/${file.root.script}(?:\?.*)?['&quot;] src=['&quot;]?(.*)${script.require.path}(?:\?.*)?['&quot;]?\s*&gt;\s*&lt;/script&gt;[\d\w\s\W]**&lt;!-- //-end- ${build.jstoken} --&gt;" />
            <var name="replaceRegex" value="&lt;script data-main='\1/${scripts.sha}.js\' src='${script.require.path}'&gt;&lt;/script&gt;" />
          </then>
          <else>
            <replaceregexp match="&lt;!-- //-beg- ${build.jstoken} [\d\w\s\W]*&lt;script.*src=['&quot;]?(.*)/${file.root.script}(?:\?.*)?['&quot;]?\s*&gt;\s*&lt;/script&gt;[\d\w\s\W]*&lt;!-- //-end- ${build.jstoken} --&gt;" replace="&lt;script src=&quot;\1/${scripts.sha}.js&quot; ${scripts.async}  ${scripts.defer} &gt;&lt;/script&gt;" flags="gs">
              <fileset dir="${dir.intermediate}" includes="${page-files}" />
            </replaceregexp>
          </else>
        </if>
        <!-- style.css replacement handled as a replacetoken above -->
        <replaceregexp match="${matchRegex}" replace="${replaceRegex}" flags="m">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>
        <!--[! use comments like this one to avoid having them get minified -->
        
        <echo message="Update the HTML to reference our name-mangled modules directory" />
        <replaceregexp match="&lt;script.*src=['&quot;]?${dir.js.modules}/(.*)['&quot;]\s*&gt;" replace="&lt;script src=&quot;${modules.js.dir}/\1&quot;&gt;" flags="mg">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>

        <!-- Save the concatenated and minified version of style.css, since we were working with it
             earlier when revving image filenames [target: -rev.image.filenames] -->
        <checksum file="${dir.intermediate}/${dir.css}/style-concat.min.css" algorithm="sha" property="css.fullsha" />
        <propertyregex property="css.sha" input="${css.fullsha}" regexp=".{${hash.length}}" select="\0" />
        <property name="style.css" value="${dir.css}/${css.sha}.css" />
        <copy file="${dir.intermediate}/${dir.css}/style-concat.min.css" tofile="${dir.publish}/${dir.css.default}/${css.sha}.css" />

        <echo message="Updating the HTML with the new css filename: ${style.css}" />
        <replaceregexp match="&lt;link(.+)href=['&quot;]?(.*)${dir.css}/${file.root.stylesheet}(?:\?.*)?['&quot;\s]?(.*/?&gt;)" replace="&lt;link\1href=&quot;\2${dir.css.default}/${css.sha}.css&quot;\3" flags="m">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>
        
        <!-- Tidy up HTML when compiling LESS -->
        <if>
          <equals arg1="${build.css.less}" arg2="true" />
          <then>
            <echo message="Removing LESS CSS Script from HTML..." />
            <replaceregexp match="&lt;!-- less script [\d\w\s\W]* end less script --&gt;" replace="">
              <fileset dir="${dir.intermediate}" includes="${page-files}" />
            </replaceregexp>
            <echo message="Changing rel attribute to 'stylesheet' from 'stylesheet/less'" />
            <replaceregexp match="rel=['&quot;]stylesheet/less['&quot;]" replace="rel='stylesheet'">
              <fileset dir="${dir.intermediate}" includes="${page-files}" />
            </replaceregexp>
          </then>
        </if>
        <foreach list="${file.stylesheets}" param="css_file" target="-css-remove-concatenated-stylesheets" />
      </then>
    </if>
  </target>

  <target name="-css" depends="-mkdirs" description="Concatenates and Minifies any stylesheets @imported via the file.stylesheets">
    <echo message="Concatenating any @imports..." />
      
    <!-- copy source file to intermediate directory -->
    <copy file="${dir.source}/${dir.css}/${file.root.stylesheet}" tofile="${dir.intermediate}/${dir.css}/${file.root.stylesheet}" />
      
    <!-- replace imports with h5bp-import tags (part 1) this one wraps @media types -->
    <replaceregexp file="${dir.intermediate}/${dir.css}/${file.root.stylesheet}" match="^@import\s+(?:url\s*\(\s*['&quot;]?|['&quot;])((?!http:|https:|ftp:|\/\/)[^&quot;^'^\s]+)(?:['&quot;]?\s*\)|['&quot;])\s*([\w\s\(\)\d\:,\-]*);.*$" replace="@media \2{ /* h5bp-import: \1 */ }" byline="true" />
      
    <!-- replace imports with h5bp-import tags (part 2) -->
    <replaceregexp file="${dir.intermediate}/${dir.css}/${file.root.stylesheet}" match="^@media \{ (/\* .* \*/) \}" replace="\1" byline="true" />
  
    <!-- copy skeleton to concat file -->
    <copy file="${dir.intermediate}/${dir.css}/${file.root.stylesheet}" tofile="${dir.intermediate}/${dir.css}/style-concat.css" overwrite="true" />
    
    <!-- load the file into a property -->
    <loadfile property="imports" srcfile="${dir.intermediate}/${dir.css}/${file.root.stylesheet}" />
    <var name="concat-files" value="${file.root.stylesheet}" />
    
    <!-- go over the file line by line -->
    <for delimiter="${line.separator}" param="import" list="${imports}">
      <sequential>
        <!-- does this line contain an h5bp-import? -->
        <propertyregex property="file.name" input="@{import}" regexp="/\* h5bp-import: (.*) \*/" select="\1" casesensitive="true" override="true" />
        <if>
          <isset property="file.name" />
          <then>
            <var name="concat-files" value="${file.name},${concat-files}" />
            
            <!-- load the file into a variable -->
            <loadfile property="file.contents" srcFile="${dir.source}/${dir.css}/${file.name}" />

            <!-- Get base filename -->
            <basename property="base.file.name" file="${file.name}" />

            <!-- Get relative path from file.name -->
            <propertyregex property="relative.path" input="${file.name}" regexp="(.*)(?=${base.file.name})" select="\0" override="true" />

            <!--
              Set the relative path to images within the imported file if the path
              does not start with data, http, https, ftp or // -->
            <propertyregex property="file.contents" input="${file.contents}" override="true" regexp="(url\((?!['\u0022])|url\(['\u0022])(?!data|http:|https:|ftp:|\/\/)" replace="\0${relative.path}" />

            <!-- pop that file into the concatenated output file -->
            <replace file="${dir.intermediate}/${dir.css}/style-concat.css" token="/* h5bp-import: ${file.name} */" value="${file.contents}" />
            <var name="file.contents" unset="true" />
          </then>
        </if>
      </sequential>
    </for>
    <if>
      <equals arg1="${build.css.less}" arg2="true" />
      <then>
        <echo message="Processing LESS CSS..." />
        <lessjs input="${dir.intermediate}/${dir.css}/style-concat.css" output="${dir.intermediate}/${dir.css}/style-concat.css" />
        <!-- load the generated LESS file and check if it contains errors -->
        <loadfile property="generatedLESS" srcfile="${dir.intermediate}/${dir.css}/style-concat.css" />
        <propertyregex property="errorLESS" input="${generatedLESS}" regexp="Error :" select="\1" casesensitive="true" />
        <if>
          <equals arg1="${errorLESS}" arg2="\1" />
          <then>
            <fail message="LESS Compilation Error: ${generatedLESS}" />
          </then>
        </if>
      </then>
      <else>
        <echo message="NOT Processing LESS CSS" />
      </else>
    </if>
    <if>
      <equals arg1="${build.css.scss}" arg2="true" />
      <then>
        <echo message="Processing SASS (SCSS) CSS..." />
        <copy file="${dir.intermediate}/${dir.css}/style-concat.css" tofile="${dir.intermediate}/${dir.css}/style-concat.scss" />
        <sass input="${dir.intermediate}/${dir.css}/style-concat.scss" output="${dir.intermediate}/${dir.css}/style-concat.css" />
      </then>
      <else>
        <echo message="NOT Processing SASS (SCSS) CSS" />
      </else>
    </if>
    <if>
      <and>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debug" />
        </not>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debugcss" />
        </not>
        <not>
          <equals arg1="${ant.project.invoked-targets}" arg2="-build.debugdocs" />
        </not>
      </and>
      <then>
        <echo message="Minifying CSS..."/>
        <apply executable="java" parallel="false">
          <fileset dir="${dir.intermediate}/${dir.css}/" includes="style-concat.css" />
          <arg line="-jar" />
          <arg path="${dir.build.tools}/${tool.yuicompressor}" />
          <srcfile />
          <arg line="-o" />
          <mapper type="merge" to="${basedir}/${dir.intermediate}/${dir.css}/style-concat.min.css" />
          <targetfile />
        </apply>

        <echo message="Minifying any unconcatenated CSS files..." />
        <apply executable="java" parallel="false">
          <fileset dir="${dir.source}/${dir.css}/" excludes="${concat-files}" includes="**/*.css" />
          <arg line="-jar" />
          <arg path="${dir.build.tools}/${tool.yuicompressor}" />
          <srcfile />
          <arg line="-o" />
          <mapper type="glob" from="*.css" to="${basedir}/*.css" />
          <targetfile />
        </apply>
      </then>
      <else>
        <delete>
          <fileset dir="${dir.publish}" includes="**/*.css" />
        </delete>

        <!-- force the files to be overwritten with older copies from source if needhtmlrefresh is set -->
        <copy todir="${dir.intermediate}" overwrite="true">
            <fileset dir="${dir.source}" includes="${page-files}"/>
        </copy>

        <var name="matchRegex" value="" />
        <var name="replaceRegex" value="" />

        <replaceregexp match="${matchRegex}" replace="${replaceRegex}" flags="m">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>

        <checksum file="${dir.intermediate}/${dir.css}/style-concat.css" algorithm="sha" property="css.fullsha" />
        <propertyregex property="css.sha" input="${css.fullsha}" regexp=".{${hash.length}}" select="\0" />
        <property name="style.css" value="${dir.css}/${css.sha}.css" />
        <copy file="${dir.intermediate}/${dir.css}/style-concat.css" tofile="${dir.publish}/${dir.css.default}/${css.sha}.css" />

        <echo message="Updating the HTML with the new css filename: ${style.css}" />
        <replaceregexp match="&lt;link(.+)href=['&quot;]?(.*)${dir.css}/${file.root.stylesheet}(?:\?.*)?['&quot;\s]?(.*/?&gt;)" replace="&lt;link\1href=&quot;\2${dir.css.default}/${css.sha}.css&quot;\3" flags="m">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </replaceregexp>

        <copy todir="${dir.publish}">
          <fileset dir="${dir.intermediate}" includes="${page-files}" />
        </copy>
      </else>
    </if>

    <!--
      Since the mapper for minifying unconcatenated CSS files was changed,
      files are now created in the project root and need to be moved.
    -->
    <move todir="${basedir}/${dir.publish}/${dir.css}">
      <fileset dir="${basedir}" includes="*.css" />
    </move>
  </target>

  <target name="-jsdoc3" description="(PRIVATE) Publishes documentation">
    <!-- Delete any existing docs directory -->
    <echo message="Deleting previous documentation" />
    <delete dir="./${dir.docs}/" />
    <if>
      <equals arg1="${build.jsdoc3}" arg2="true" />
      <then>
        <echo message="Building documentation" />
        <apply executable="java" parallel="false" dir="./${dir.jsdoc}">
          <!-- Include our JS directory, but exclude libs -->
          <dirset dir="${dir.source}" includes="${dir.core}/js, ${dir.js}, ${dir.js}/${dir.docsin}" excludes="${slug.libs}" />
          <arg line="-classpath" />
          <arg path="./${dir.jsdoc}/lib/js.jar" />
          <arg value="org.mozilla.javascript.tools.shell.Main" />
          <arg line="-modules" />
          <arg value="node_modules" />
          <arg line="-modules" />
          <arg value="rhino_modules" />
          <arg path="./${dir.jsdoc}/${tool.jsdoc3}" />
          <arg line="${tool.jsdoc3.opts}" />
          <!-- we're in jsdoc here, so back up to the root directory -->
          <arg line="--destination" />
          <arg value="../../../../../${dir.docs}" />
        </apply>
      </then>
      <else>
        <echo message="NOT Building Documentation"/>
      </else>
    </if>
  </target>

  <!--
  *************************************************
  * FUNCTION TARGETS                              *
  *************************************************
  -->
  
  <!-- Check if Jar should be created -->
  <target name="checkJarPhase">
    <delete dir="${basedir}/target" />
    <condition property="doJar">
      <equals arg1="${jarPhase}" arg2="package" />
    </condition>
  </target>

  <!-- Jar the project -->
  <target name="jar" depends="checkJarPhase" if="doJar">
    <jar destfile="${basedir}/target/${project.artifactId}-${project.version}.jar" basedir="${basedir}" includes="**" excludes="target/**" />
  </target>

  <!-- Precompile Handlebars templates -->
  <target name="-js.ember.handlebars" if="dir.handlebars">
    <if>
      <and>
        <isset property="dir.rhino" />
        <isset property="rhino.handlebars" />
        <isset property="handlebars" />
        <isset property="handlebars.extension" />
        <isset property="ember.compiler" />
        <isset property="handlebars.outfile" />
      </and>
      <then>
        <echo message="Precompiling any Ember Handlebars templates (.${handlebars.extension} files)..." />
        <java dir="${dir.source}" jar="./${dir.build.tools}/${tool.rhino}" fork="true" failonerror="true">
          <arg value="${dir.rhino}/${rhino.handlebars}" />
          <arg value="--handlebars" />
          <arg value="${handlebars}" />
          <arg value="--extension" />
          <arg value="${handlebars.extension}" />
          <arg value="--embercompiler" />
          <arg value="${dir.rhino}/${ember.compiler}" />
          <arg value="--templates" />
          <arg value="${dir.js}/${dir.templates}/" />
          <arg value="--output" />
          <arg value="${dir.js}/${dir.templates}/${handlebars.outfile}" />
        </java>
      </then>
    </if>
  </target>

  <!-- Publish precompiled Handlebars templates -->
  <target name="-js.ember.handlebars.copy" depends="-js.ember.handlebars">
    <if>
      <equals arg1="${ant.project.invoked-targets}" arg2="-build.debughbs" />
      <then>
        <echo message="Copying compiled Handlebars templates to publish folder..." />
        <copy todir="${dir.publish}/${dir.js}/${dir.templates}" file="${dir.source}/${dir.js}/${dir.templates}/${handlebars.outfile}" />
      </then>
    </if>
  </target>

  <!-- An updated Sass macro -->
  <macrodef name="sass">
    <attribute name="input" />
    <attribute name="output" />
    <sequential>
      <java dir="${dir.source}/${dir.build.tools}" jar="${dir.source}/${dir.build.tools}/jruby-complete-1.6.7.2.jar" fork="true" failonerror="true">
        <arg value="${basedir}/${dir.build.custom}/tools/sass-compile.rb" />
        <arg value="${basedir}/${dir.css.default}" />
        <arg value="${basedir}/${dir.css}" />
        <arg value="${basedir}/@{input}" />
        <arg value="${basedir}/@{output}" />
      </java>
      <echo>Sass (scss): generated @{output}</echo>
    </sequential>
  </macrodef>
</project>